spring.application.name=split_and_share

# Heroku PostgreSQL Configuration
# spring.datasource.url=jdbc:postgresql://c1i13pt05ja4ag.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/d9tr8pjhda30hv
spring.datasource.url=jdbc:postgresql://${JDBC_DATABASE_HOST}:${JDBC_DATABASE_PORT}/${JDBC_DATABASE_NAME}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}
# spring.datasource.username=ue7bqkmevmbigj
# spring.datasource.password=p2d843de94a4651d7f172e4beddae99224ccfdb28984b34c1e0881f6bd11072ee
# hibernate configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# this will drop and create tables again
spring.jpa.hibernate.ddl-auto=create
# this can be used to update tables

# spring.jpa.hibernate.ddl-auto=update

# To ensure your Spring Boot app listens on this dynamic port provided by Heroku,
# you need to configure your app to use the $PORT environment variable in your application.properties
server.port=${PORT:8080}
# This configuration ensures that your Spring Boot app uses the port value provided by Heroku.
# If for any reason Heroku doesn't provide the PORT variable (which is unlikely), it defaults to 8080