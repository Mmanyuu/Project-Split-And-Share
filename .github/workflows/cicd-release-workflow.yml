name: CICD Workflow Release Branch

on:
  push:
    branches:
      - release               # Triggers. Gitaction will trigger when i git push release branch

jobs:
  
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Install Dependencies (Maven)
        run: mvn -B clean install -DskipTests
      - name: Upload Artifacts (if needed)
        if: always() # Always run this step, even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: target-${{ matrix.os }}
          path: target/*.jar
          retention-days: 1

  dependencies_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
      - name: Run Snyk Vulnerability Scan (Dependencies Only)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --file=pom.xml --severity-threshold=high || echo "Issues detected but not failing the build"  # Scan pom.xml for dependencies

  code_scan:
    runs-on: ubuntu-latest # Similar to dependencies test - No point scanning all three os cause this is about scanning our project codes
    needs: build # Depends on the build job
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
      - name: Run Snyk Code Vulnerability Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk code test --severity-threshold=medium

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: code_scan
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}
          path: target
      - name: Run Three Tests (Maven)
        run: |
          export TEST_CLASSES="sg.edu.ntu.split_and_share.service.UserServiceImplTest,sg.edu.ntu.split_and_share.service.ExpenseServiceImplTest,sg.edu.ntu.split_and_share.controller.ExpenseControllerTest"
          mvn test -Dtest="$TEST_CLASSES"
  
  build-docker-image:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref_name == 'release'
    env: #setting the environment so that the command on the following will be easier. the link to these env will be env.APP_NAME, env.REGISTRY_NAME, env.IMAGE_NAME
      APP_NAME: ${{ secrets.DEPLOY_APP_NAME }}
      REGISTRY_NAME: ${{ secrets.DEPLOY_REGISTRY_NAME }}
      IMAGE_NAME: project_split_and_share
    steps:
      - uses: actions/checkout@v4
      - name: Login to DigitalOcean Container Registry
        run: echo ${{ secrets.DIGITALOCEAN_DOCKER_PASSWORD }} | docker login -u "${{ secrets.DIGITALOCEAN_DOCKER_USERNAME }}" --password-stdin registry.digitalocean.com
      - name: Build Docker Image
        run: docker build -t registry.digitalocean.com/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
      - name: Push Docker Image
        run: docker push registry.digitalocean.com/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Trigger App Platform Deployment
        run: |
          curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
          -d '{"spec": { "name": "${{ env.APP_NAME }}", "services": [{"image": "registry.digitalocean.com/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"}] }}' \
          "https://api.digitalocean.com/v2/apps/${{ secrets.DEPLOY_APP_ID }}/deployments"

