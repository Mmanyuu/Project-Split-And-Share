name: CI/CD Pipeline

on:
  push:
    branches: [ main-backup ] # Triggers. Gitaction will trigger when i git push main-backup branch

jobs:
  build:
    runs-on: ${{ matrix.os }} 
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # Recommended distribution
          cache: maven
      - name: Install Dependencies (Maven)
        run: mvn -B clean install -DskipTests # -B for batch mode in mvn command. prevents interactive prompts in Maven, which can cause workflow to hang.
      - name: Upload Artifacts (if needed) #crucial for multi OS build - saving the build outputs (JARs, etc) so that subsequents jobs (like testing and deploy) can use
        if: always() # Always run this step, even if previous steps fail
        uses: actions/upload-artifact@v3
        with:
          name: target-${{ matrix.os }} # creating distinct artifact names (e.g. target-ubuntu-latest, target-marcos-latest). preventin overwriting artifacts
          path: target/*.jar # Or the specific artifacts you need
          retention-days: 1 # How long to keep the artifacts
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    needs: code_scan
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' # Recommended distribution
          cache: maven
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: target-${{ matrix.os }}
      - name: Run Tests (Maven)
        run: mvn test -Dtest=sg.edu.ntu.split_and_share.service.UserServiceImplTest,sg.edu.ntu.split_and_share.service.ExpenseServiceImplTest,sg.edu.ntu.split_and_share.controller.ExpenseControllerTest.java
  
  build-docker-image:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: echo "<span class="math-inline">\{\{ secrets\.DOCKERHUB\_PASSWORD \}\}" \| docker login \-u "</span>{{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Build Docker Image
        run: docker build -t bindugopinathan/project_split_and_share:tagname .
      - name: Push Docker Image to Docker Hub
        run: docker push bindugopinathan/project_split_and_share:tagname
  
  deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    needs: build-docker-image
    steps:
      - uses: actions/checkout@v3
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install-ubuntu.sh | sudo bash
      - name: Login to Heroku
        run: heroku container:login
      - name: Set Heroku Stack
        run: heroku stack:set container -a bindu-split-and-share
      - name: Push Container Image to Heroku
        run: heroku container:push web -a bindu-split-and-share
      - name: Release Container Image on Heroku
        run: heroku container:release web -a bindu-split-and-share

  dependencies_scan:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    needs: build # Depends on the build job
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven # Optional, but recommended
      - name: Install Snyk CLI
        run: npm install -g snyk # Install snyk cli using npm
      - name: Run Snyk Vulnerability Scan (Dependencies Only)
        env: # Define environment variables here
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Use GitHub secrets
        run: snyk test --unmanaged --file=pom.xml # Scan pom.xml for dependencies

  code_scan:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    needs: build # Depends on the build job
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven # Optional, but recommended
      - name: Install Snyk CLI
        run: npm install -g snyk # Install snyk cli using npm
      - name: Run Snyk Code Vulnerability Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk code test --severity-threshold=medium

